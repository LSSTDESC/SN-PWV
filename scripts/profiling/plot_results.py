"""This script plots pipeline profiling results generated by ``run_profiling.sh``"""

from pathlib import Path

import numpy as np
from matplotlib import pyplot as plt

DATA_DIR = Path(__file__).resolve().parent.parent.parent / 'data' / 'profiling'


def get_runtime_results(file: Path) -> tuple[int, int, int, float]:
    """Get runtime results from the given file path
    
    Args:
        file: The file to retrieve profiling results from
        
    Returns:
        - The number of processes allocated to light curve simulation
        - The number of processes allocated to light curve fitting
        - The number of processes allocated to writing results to disk
        - The total runtime in seconds
    """

    # Get the number of processes allocated to each node from the file name
    sim, fit, write = file.stem.split('.')

    # Get the runtime from the end of the file
    with file.open() as infile:
        real, user, system = infile.readlines()[-3:]
        minute, sec = real.strip(r'real\t').rstrip('s\n').split('m')
        sec = int(minute) * 60 + float(sec)

    return int(sim), int(fit), int(write), sec


def main() -> None:
    """Plot the profiling results and print results from the fastest runs"""

    # Accumulators for the all profiling results across all runs
    sim_all_runs = []
    fit_all_runs = []
    write_all_runs = []
    runtime_all_runs = []

    fig, axis = plt.subplots()
    for i in range(1, 6):
        # Accumulate x and y values for the plot
        x_vals = []  # The number of processes allocated to simulation
        y_vals = []  # The total runtime in seconds

        for file in DATA_DIR.glob(f'*{i}.txt'):
            try:
                sim, fit, write, sec = get_runtime_results(file)

            except:
                print(f'Cannot parse {file}')
                continue

            x_vals.append(sim)
            y_vals.append(sec)

            sim_all_runs.append(sim)
            fit_all_runs.append(fit)
            write_all_runs.append(write)
            runtime_all_runs.append(sec)

        if not x_vals:
            continue

        axis.scatter(x_vals, y_vals, label=f'Output Processes = {i}', alpha=.7)

    axis.set_ylabel('Runtime (Seconds)')
    axis.set_xlabel('Processes Allocated to Simulation')
    axis.legend()
    plt.savefig(DATA_DIR / 'results.png')

    print('Best five runtimes:')
    for i in np.argsort(runtime_all_runs)[:5]:
        print('Num Simulation Processes =', sim_all_runs[i])
        print('Num Fitting Processes    =', fit_all_runs[i])
        print('Num Writing Processes    =', write_all_runs[i])
        print('Runtime = ', runtime_all_runs[i], '\n')

    plt.show()


if __name__ == '__main__':
    main()
